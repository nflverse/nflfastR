% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/database.R
\name{update_pbp_db}
\alias{update_pbp_db}
\title{Update or Create a nflverse Play-by-Play Data Table in a Connected Database}
\usage{
update_pbp_db(conn, ..., name = "nflverse_pbp", seasons = most_recent_season())
}
\arguments{
\item{conn}{A \code{DBIConnection} object, as returned by \code{\link[DBI:dbConnect]{DBI::dbConnect()}}}

\item{...}{These dots are for future extensions and must be empty.}

\item{name}{The table name, passed on to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}. Options are:
\itemize{
\item a character string with the unquoted DBMS table name,
e.g. \code{"table_name"},
\item a call to \code{\link[DBI:Id]{Id()}} with components to the fully qualified table name,
e.g. \code{Id(schema = "my_schema", table = "table_name")}
\item a call to \code{\link[DBI:SQL]{SQL()}} with the quoted and fully qualified table name
given verbatim, e.g. \code{SQL('"my_schema"."table_name"')}
}}

\item{seasons}{Hybrid argument (logical or numeric) to update parts
of or the complete play by play table within the database.

It can update the play by play data table either for the whole nflfastR era
(with \code{seasons = TRUE}) or just for specified seasons
(e.g. \code{seasons = 2024:2025}).

Defaults to \link{most_recent_season}. Please see details for further information.}
}
\value{
Always returns the database connection invisibly.
}
\description{
The nflfastR play-by-play era dates back to 1999. To analyze all the data
efficiently, there is practically no alternative to working with a database.

This function helps to create and maintain a table containing all
play-by-play data of the nflfastR era in a connected database.
Primarily, the preprocessed data from \link{load_pbp} is written to the database
and, if necessary, supplemented with the latest games using
\link{build_nflfastR_pbp}.
}
\details{
\subsection{The \code{season} argument}{

The season argument controls how the table in the connected database is
handled.

With \code{seasons = TRUE}, the table in argument \code{name} will be removed completely
(by calling \link[DBI:dbRemoveTable]{DBI::dbRemoveTable}) and all seasons of the nflfastR era will be
added to a fresh table. This is helpful when new columns are added during the
offseason.

With a numerical vector, e.g. \code{seasons = 2024:2025}, the table in argument
\code{name} will be preserved and only rows from the given seasons will be deleted
and re-added (by calling \link[DBI:dbAppendTable]{DBI::dbAppendTable}). This is intended to be used
for ongoing seasons because the NFL fixes bugs in the underlying data during
the week and we recommend rebuilding the current season every Thursday during
the season.

The default behavior is \code{seasons = most_recent_season()}, which means that
only the most recent season is updated or added.

To keep the table, and thus also the schema, but update all play-by-play
data of the nflfastR era, set

\if{html}{\out{<div class="sourceCode">}}\preformatted{seasons = seq(1999, most_recent_season())
}\if{html}{\out{</div>}}

If seasons contains multiple seasons, it is possible to control whether the
seasons are loaded individually and written to the database, or whether
multiple seasons should be processed in chunks. The latter is more efficient
because fewer write operations are required, but at the same time, the data
must first be stored in memory. The option \verb{“nflfastR.db_chunk_size”} can
be used to control how many seasons are loaded together in a chunk and
written to the database. With the following option, for example, 5 seasons
are always loaded together and written to the database.

\if{html}{\out{<div class="sourceCode">}}\preformatted{options("nflfastR.db_chunk_size" = 5L)
}\if{html}{\out{</div>}}
}
}
\examples{
\donttest{
con <- DBI::dbConnect(duckdb::duckdb())
try({# to avoid CRAN test problems
update_pbp_db(con, seasons = 2024)
})
}
}
